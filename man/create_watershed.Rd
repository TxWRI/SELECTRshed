% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_watershed.R
\name{create_watershed}
\alias{create_watershed}
\title{Watershed}
\usage{
create_watershed(
  d8_pntr,
  pour_pts,
  output = tempfile(fileext = ".tif"),
  esri_pntr = FALSE,
  whitebox_wd = NULL,
  type = "terra",
  ...
)
}
\arguments{
\item{d8_pntr}{Input D8 pointer.}

\item{pour_pts}{Input pour points (outlet).}

\item{output}{A character file path specifying where the shapefile file should be stored. Defaults to a temporary file.}

\item{esri_pntr}{D8 pointer uses the ESRI style scheme.}

\item{whitebox_wd}{valid working directory for whitebox to store temporary rasters. Defaults to NULL which stores in a temporary space that is deleted when the user session is over. You can use this to store rasters before they are processed into terra::rast objects. Otherwise it is suggested to leave this NULL and store the rasters using the output argument.}

\item{type}{character, one of \code{"terra"} or \code{"wbt"}. If \code{type = "terra"}, returns an object of SpatVector. If \code{type = "wbt"}, a wbt_result object is returned.}

\item{...}{optional arguments passed to \code{whitebox::wbt()}.}
}
\value{
A SpatRaster or wbt_result object.
}
\description{
Identifies the watershed, or drainage basin, draining to a set of target cells.
}
\examples{
\dontshow{if (whitebox::check_whitebox_binary()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
dem <- system.file("extdata", "thompsoncreek.tif", package = "SELECTR")
dem <- terra::rast(dem)
gpkg <- system.file("extdata", "thompsoncreek.gpkg", package = "SELECTRdata")
pourpoint <- terra::vect(gpkg, layer = "pourpoint", crs = terra::crs(dem))
D8pointer <- create_d8_pointer(dem)
D8fa <- create_d8_fa(D8pointer)
streams_ras <- create_streams(D8fa)
## write pourpoints to temp folder
temp_pour_point_file <- tempfile("snapped", fileext = ".shp")
snapped_pour_point <- snap_pour_point(pour_pts = pourpoint,
                                      streams = streams_ras,
                                      output = temp_pour_point_file)
snapped_pour_point <- terra::vect(temp_pour_point_file)
pour_point_rast <-  terra::rasterize(snapped_pour_point, streams_ras)
create_watershed(d8_pntr = D8pointer, pour_pts = pour_point_rast)
## cleanup temp files
unlink(tempdir(), recursive = FALSE)
\dontshow{\}) # examplesIf}
}
